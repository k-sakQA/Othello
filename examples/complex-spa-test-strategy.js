/**
 * Ë§áÈõë„Å™SPA„Çµ„Ç§„Éà„ÅÆ„ÉÜ„Çπ„ÉàÊà¶Áï•ÔºàPhase 9ÂÆüË£Ö„Ç§„É°„Éº„Ç∏Ôºâ
 * 
 * „Ç∑„Éä„É™„Ç™ÔºöNotionÈ¢®„ÅÆ„Éâ„Ç≠„É•„É°„É≥„Éà„Ç®„Éá„Ç£„Çø„Çí„ÉÜ„Çπ„Éà
 * - ÂãïÁöÑDOMÔºàReact/VueÔºâ
 * - „É™„ÉÉ„ÉÅ„ÉÜ„Ç≠„Çπ„Éà„Ç®„Éá„Ç£„Çø
 * - „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó
 * - „É™„Ç¢„É´„Çø„Ç§„É†ÂêåÊúü
 */

const OthelloPlanner = require('../src/agents/othello-planner');
const OthelloGenerator = require('../src/agents/othello-generator');
const OthelloHealer = require('../src/agents/othello-healer');
const Othello = require('../src/playwright-agent');
const Analyzer = require('../src/analyzer');
const ConfigManager = require('../src/config');

async function testComplexSPA() {
  console.log('üéØ Ë§áÈõë„Å™SPA„Çµ„Ç§„Éà„ÅÆ„ÉÜ„Çπ„ÉàÊà¶Áï•\n');

  // Ë®≠ÂÆöË™≠„ÅøËæº„Åø
  const config = await ConfigManager.load('./config/default.json');
  
  // ===================================
  // Phase 1: Othello-Planner - „Çµ„Ç§„ÉàÊßãÈÄ†„ÇíÁêÜËß£
  // ===================================
  console.log('üìã Phase 1: Othello-Planner - „Çµ„Ç§„ÉàÊßãÈÄ†„ÅÆÊé¢Á¥¢\n');
  
  const planner = new OthelloPlanner(config);
  
  const testPlan = await planner.generateTestPlan({
    url: 'https://complex-app.example.com',
    requirements: [
      '„Éâ„Ç≠„É•„É°„É≥„Éà‰ΩúÊàê„ÉªÁ∑®ÈõÜÊ©üËÉΩ„ÅÆ„ÉÜ„Çπ„Éà',
      'Ë§áÊï∞„É¶„Éº„Ç∂„Éº„ÅÆ„Ç≥„É©„Éú„É¨„Éº„Ç∑„Éß„É≥',
      '„É™„Ç¢„É´„Çø„Ç§„É†ÂêåÊúü„ÅÆÊ§úË®º'
    ],
    existingCoverage: null // ÂàùÂõûÂÆüË°å
  });

  console.log('‚úÖ „ÉÜ„Çπ„ÉàË®àÁîªÁîüÊàêÂÆå‰∫Ü');
  console.log(`   Áô∫Ë¶ã„Åï„Çå„Åü„Éö„Éº„Ç∏: ${testPlan.plan.pages_discovered?.length || 0}‰ª∂`);
  console.log(`   ÁîüÊàê„Åï„Çå„Åü„Ç∑„Éä„É™„Ç™: ${testPlan.scenarios.length}‰ª∂\n`);

  // „ÉÜ„Çπ„ÉàË®àÁîª„Çí„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
  await planner.saveToFile(testPlan, './specs/complex-spa-plan.md');

  // ===================================
  // Phase 2: Othello-Generator - ÂÆüË°åÂèØËÉΩ„Å™ÊåáÁ§∫„Å´Â§âÊèõ
  // ===================================
  console.log('üîß Phase 2: Othello-Generator - MCP‰∫íÊèõÊåáÁ§∫„ÅÆÁîüÊàê\n');
  
  const generator = new OthelloGenerator(config);
  
  const instructions = await generator.generateInstructions({
    testPlan: testPlan,
    scenario: testPlan.scenarios[0], // ÊúÄÂàù„ÅÆ„Ç∑„Éä„É™„Ç™
    format: 'mcp',
    options: {
      // ÂãïÁöÑË¶ÅÁ¥†„Å∏„ÅÆÂØæÂøú
      waitStrategy: 'adaptive', // „Éö„Éº„Ç∏„ÅÆÁä∂ÊÖã„Å´Âøú„Åò„ÅüÂæÖÊ©ü
      selectorStrategy: 'ref-based', // MCP„ÅÆref„ÇíÂÑ™ÂÖà‰ΩøÁî®
      errorHandling: 'retry-with-heal' // „Ç®„É©„ÉºÊôÇ„ÅØHealer„ÇíÂëº„Å≥Âá∫„Åó
    }
  });

  console.log('‚úÖ ÊåáÁ§∫ÁîüÊàêÂÆå‰∫Ü');
  console.log(`   ÁîüÊàê„Åï„Çå„ÅüÊåáÁ§∫: ${instructions.length}‰ª∂\n`);

  // ÊåáÁ§∫„ÅÆ‰æã„ÇíË°®Á§∫
  console.log('üìù ÁîüÊàê„Åï„Çå„ÅüÊåáÁ§∫„ÅÆ‰æã:');
  instructions.slice(0, 3).forEach((inst, idx) => {
    console.log(`   ${idx + 1}. ${inst.type}: ${inst.description}`);
  });
  console.log();

  // ===================================
  // Phase 3: Othello - ÂÆüÈöõ„Å´„ÉÜ„Çπ„ÉàÂÆüË°å
  // ===================================
  console.log('üé≠ Phase 3: Othello - „ÉÜ„Çπ„ÉàÂÆüË°å\n');
  
  const othello = new Othello(config, { mockMode: false });
  await othello.initializeSession();

  const results = [];
  let failedInstructions = [];

  for (const instruction of instructions) {
    console.log(`üîÑ ÂÆüË°å‰∏≠: ${instruction.description}`);
    
    try {
      // „Ç®„É©„Éº„É™„Ç´„Éê„É™„Éº‰ªò„Åç„ÅßÂÆüË°å
      const result = await othello.executeWithRetry(
        async () => await othello.executeInstruction(instruction),
        instruction.description
      );

      results.push(result);

      if (!result.success) {
        console.log(`   ‚ö†Ô∏è  Â§±Êïó: ${result.error}`);
        failedInstructions.push({ instruction, error: result.error });
      } else {
        console.log(`   ‚úÖ ÊàêÂäü`);
      }
    } catch (error) {
      console.log(`   ‚ùå „Ç®„É©„Éº: ${error.message}`);
      failedInstructions.push({ instruction, error: error.message });
    }
  }

  console.log();

  // ===================================
  // Phase 4: Othello-Healer - Â§±Êïó„Åó„Åü„ÉÜ„Çπ„Éà„Çí‰øÆÂæ©
  // ===================================
  if (failedInstructions.length > 0) {
    console.log('ü©π Phase 4: Othello-Healer - Â§±Êïó„ÉÜ„Çπ„Éà„ÅÆ‰øÆÂæ©\n');
    
    const healer = new OthelloHealer(config);

    for (const { instruction, error } of failedInstructions) {
      console.log(`üîç ‰øÆÂæ©„ÇíË©¶„Åø„Å¶„ÅÑ„Åæ„Åô: ${instruction.description}`);
      
      // ÁèæÂú®„ÅÆ„Çπ„Éä„ÉÉ„Éó„Ç∑„Éß„ÉÉ„Éà„ÇíÂèñÂæó
      const currentSnapshot = await othello.mcpClient.snapshot();
      
      // Healer„Åß‰øÆÂæ©
      const healed = await healer.heal({
        originalInstruction: instruction,
        error: {
          message: error,
          snapshot: currentSnapshot.content
        }
      });

      if (healed.fixed) {
        console.log(`   ‚úÖ ‰øÆÂæ©ÊàêÂäü: ${healed.reasoning}`);
        console.log(`   üîÑ ‰øÆÂæ©Âæå„ÅÆÊåáÁ§∫„ÅßÂÜçÂÆüË°å‰∏≠...`);
        
        // ‰øÆÂæ©„Åó„ÅüÊåáÁ§∫„ÅßÂÜçÂÆüË°å
        const retryResult = await othello.executeInstruction(healed.newInstruction);
        
        if (retryResult.success) {
          console.log(`   üéâ ÂÜçÂÆüË°åÊàêÂäüÔºÅ\n`);
        } else {
          console.log(`   ‚ö†Ô∏è  ÂÜçÂÆüË°å„ÇÇÂ§±Êïó: ${retryResult.error}\n`);
        }
      } else {
        console.log(`   ‚ùå ‰øÆÂæ©‰∏çÂèØËÉΩ: ${healed.reasoning}\n`);
      }
    }
  }

  // ===================================
  // Phase 5: Analyzer - „Ç´„Éê„É¨„ÉÉ„Ç∏ÂàÜÊûê
  // ===================================
  console.log('üìä Phase 5: Analyzer - „Ç´„Éê„É¨„ÉÉ„Ç∏ÂàÜÊûê\n');
  
  const analyzer = new Analyzer(config);
  
  // ÂÆüË°åÂ±•Ê≠¥„ÇíÂàÜÊûê
  const coverage = await analyzer.analyzeCoverage({
    results: results,
    targetUrl: 'https://complex-app.example.com'
  });

  console.log(`‚úÖ „Ç´„Éê„É¨„ÉÉ„Ç∏ÂàÜÊûêÂÆå‰∫Ü`);
  console.log(`   „ÉÜ„Çπ„ÉàÊ∏à„ÅøË¶ÅÁ¥†: ${coverage.tested_elements?.length || 0}‰ª∂`);
  console.log(`   Êú™„ÉÜ„Çπ„ÉàË¶ÅÁ¥†: ${coverage.untested_elements?.length || 0}‰ª∂`);
  console.log(`   „Ç´„Éê„É¨„ÉÉ„Ç∏Áéá: ${coverage.coverage_percentage || 0}%\n`);

  // Êú™„Ç´„Éê„ÉºË¶ÅÁ¥†„Åå„ÅÇ„Çå„Å∞Ê¨°„ÅÆ„Ç§„ÉÜ„É¨„Éº„Ç∑„Éß„É≥„Å∏
  if (coverage.untested_elements && coverage.untested_elements.length > 0) {
    console.log('üîÑ Êú™„Ç´„Éê„ÉºË¶ÅÁ¥†„ÅåÂ≠òÂú® ‚Üí Ê¨°„ÅÆ„Ç§„ÉÜ„É¨„Éº„Ç∑„Éß„É≥„ÅßËøΩÂä†„ÉÜ„Çπ„Éà');
    console.log('   Êú™„ÉÜ„Çπ„ÉàË¶ÅÁ¥†„ÅÆ‰æã:');
    coverage.untested_elements.slice(0, 3).forEach((elem, idx) => {
      console.log(`   ${idx + 1}. ${elem.type}: ${elem.description}`);
    });
  } else {
    console.log('üéâ „Åô„Åπ„Å¶„ÅÆË¶ÅÁ¥†„Çí„Ç´„Éê„ÉºÔºÅ');
  }

  // „Çª„ÉÉ„Ç∑„Éß„É≥„ÇØ„É≠„Éº„Ç∫
  await othello.closeSession();
  
  console.log('\n‚ú® „ÉÜ„Çπ„ÉàÂÆå‰∫ÜÔºÅ');
}

// ===================================
// ÈáçË¶Å„Å™ÂÆüË£Ö„Éù„Ç§„É≥„Éà
// ===================================

/**
 * 1. Othello-Planner: LLM„Åß„Çµ„Ç§„ÉàÊßãÈÄ†„ÇíÁêÜËß£
 * 
 * „Éó„É≠„É≥„Éó„Éà‰æã:
 * ```
 * You are analyzing a complex web application.
 * 
 * URL: https://complex-app.example.com
 * Current Snapshot:
 * [MCP„Åã„ÇâÂèñÂæó„Åó„Åü„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£„ÉÑ„É™„Éº]
 * 
 * Tasks:
 * 1. Identify all interactive elements (buttons, inputs, links)
 * 2. Understand the business logic (what does this button do?)
 * 3. Detect common patterns (forms, modals, navigation)
 * 4. Generate test scenarios covering:
 *    - Happy paths
 *    - Edge cases
 *    - Error handling
 * 
 * Output format: Markdown test plan
 * ```
 */

/**
 * 2. Othello-Generator: „Çª„É¨„ÇØ„ÇøÊà¶Áï•
 * 
 * ÂÑ™ÂÖàÈ†Ü‰Ωç:
 * 1. MCP ref (ÊúÄ„ÇÇ‰ø°È†ºÊÄß„ÅåÈ´ò„ÅÑ)
 * 2. data-testidÂ±ûÊÄß
 * 3. „Ç¢„ÇØ„Çª„Ç∑„Éñ„É´„Å™ÂêçÂâç (role + name)
 * 4. „Çª„Éû„É≥„ÉÜ„Ç£„ÉÉ„ÇØ„Çª„É¨„ÇØ„Çø (button:has-text("Submit"))
 * 5. CSS„Çª„É¨„ÇØ„Çø (ÊúÄÂæå„ÅÆÊâãÊÆµ)
 * 
 * ‰æã:
 * ```javascript
 * async selectElement(description) {
 *   // 1. Snapshot„Åã„Çâref„ÇíÊ§úÁ¥¢
 *   const ref = this.findRefByDescription(description);
 *   if (ref) return { type: 'ref', value: ref };
 *   
 *   // 2. data-testid
 *   const testId = await page.locator(`[data-testid="${description}"]`);
 *   if (await testId.count() > 0) return { type: 'testid', value: description };
 *   
 *   // 3. „Ç¢„ÇØ„Çª„Ç∑„Éñ„É´Âêç
 *   const accessible = await page.getByRole('button', { name: description });
 *   if (await accessible.count() > 0) return { type: 'accessible', ... };
 *   
 *   // ... ‰ª•‰∏ãÂêåÊßò
 * }
 * ```
 */

/**
 * 3. Othello-Healer: Â§±Êïó„Éë„Çø„Éº„É≥„ÅÆÂàÜÈ°û
 * 
 * „Éë„Çø„Éº„É≥1: Ë¶ÅÁ¥†„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑ
 * ‚Üí Êñ∞„Åó„ÅÑSnapshot„Åã„Çâ‰ª£Êõøref„ÇíÊé¢„Åô
 * 
 * „Éë„Çø„Éº„É≥2: „Çø„Ç§„É†„Ç¢„Ç¶„Éà
 * ‚Üí ÂæÖÊ©üÊôÇÈñì„ÇíÂª∂Èï∑„ÄÅÂà•„ÅÆÂæÖÊ©üÊà¶Áï•„ÇíË©¶„Åô
 * 
 * „Éë„Çø„Éº„É≥3: Ë¶ÅÁ¥†„ÅåÈö†„Çå„Å¶„ÅÑ„Çã
 * ‚Üí „Çπ„ÇØ„É≠„Éº„É´„ÄÅ„É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã„ÄÅ„Å™„Å©
 * 
 * „Éë„Çø„Éº„É≥4: ÂÄ§„ÅåÁÑ°Âäπ
 * ‚Üí LLM„ÅßÂ¶•ÂΩì„Å™ÂÄ§„ÇíÁîüÊàê
 * 
 * ‰æã:
 * ```javascript
 * async categorizeFailure(error, snapshot) {
 *   const prompt = `
 *     Error: ${error.message}
 *     Current page state: ${snapshot}
 *     
 *     Categorize this error:
 *     1. Element not found
 *     2. Timeout
 *     3. Element hidden
 *     4. Invalid value
 *     5. Other
 *     
 *     Suggest a fix.
 *   `;
 *   
 *   const analysis = await this.callLLM(prompt);
 *   return this.parseHealing(analysis);
 * }
 * ```
 */

// ÂÆüË°åÔºà„É¢„ÉÉ„ÇØÔºâ
if (require.main === module) {
  testComplexSPA()
    .then(() => console.log('\nüéâ ÂÆå‰∫Ü'))
    .catch(err => console.error('\n‚ùå „Ç®„É©„Éº:', err));
}

module.exports = { testComplexSPA };
