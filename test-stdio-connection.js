/**
 * StdioÈÄö‰ø°„ÉÜ„Çπ„Éà - Playwright MCP
 * 
 * StdioÈÄö‰ø°„ÅßPlaywright MCP„Çµ„Éº„Éê„Éº„Å´Êé•Á∂ö„Åó„ÄÅ
 * ÈÄ£Á∂ö„Åó„Å¶Ë§áÊï∞„ÅÆ„É™„ÇØ„Ç®„Çπ„Éà„ÇíÈÄÅ‰ø°„Åó„Å¶Âãï‰ΩúÁ¢∫Ë™ç„ÄÇ
 */

const { MCPStdioClient } = require('./src/mcp-stdio-client');

async function main() {
  console.log('=== StdioÈÄö‰ø°„ÉÜ„Çπ„ÉàÈñãÂßã ===\n');

  const client = new MCPStdioClient({
    clientName: 'test-stdio',
    clientVersion: '1.0.0',
    serverArgs: [
      // '--headless',  // „Éò„ÉÉ„Éâ„É¨„Çπ„É¢„Éº„Éâ„ÅßÂÆüË°å„Åó„Åü„ÅÑÂ†¥Âêà„ÅØ„Ç≥„É°„É≥„ÉàËß£Èô§
    ],
  });

  try {
    // „Çπ„ÉÜ„ÉÉ„Éó 1: Êé•Á∂ö
    console.log('üì° Step 1: Connecting to Playwright MCP via Stdio...');
    await client.connect();
    console.log('‚úÖ Connected successfully\n');

    // „Çπ„ÉÜ„ÉÉ„Éó 2: „ÉÑ„Éº„É´‰∏ÄË¶ßÂèñÂæó
    console.log('üîß Step 2: Listing available tools...');
    const tools = await client.listTools();
    console.log(`‚úÖ Found ${tools.length} tools:`);
    tools.forEach(tool => {
      console.log(`  - ${tool.name}: ${tool.description || '(no description)'}`);
    });
    console.log();

    // „Çπ„ÉÜ„ÉÉ„Éó 3: „Éö„Éº„Ç∏„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥
    console.log('üåê Step 3: Navigating to Google...');
    const navResult = await client.navigate('https://www.google.com');
    console.log('‚úÖ Navigation result:', navResult.success ? 'Success' : 'Failed');
    if (navResult.sections) {
      const pageUrl = navResult.sections.get('Page URL');
      const pageTitle = navResult.sections.get('Page Title');
      console.log(`   Page URL: ${pageUrl}`);
      console.log(`   Page Title: ${pageTitle}`);
    }
    console.log();

    // „Çπ„ÉÜ„ÉÉ„Éó 4: „Çπ„Éä„ÉÉ„Éó„Ç∑„Éß„ÉÉ„ÉàÂèñÂæó
    console.log('üì∏ Step 4: Taking page snapshot...');
    const snapshotResult = await client.snapshot();
    console.log('‚úÖ Snapshot result:', snapshotResult.success ? 'Success' : 'Failed');
    if (snapshotResult.sections) {
      const pageSnapshot = snapshotResult.sections.get('Page Snapshot');
      if (pageSnapshot) {
        const lines = pageSnapshot.split('\n').slice(0, 10); // ÊúÄÂàù„ÅÆ10Ë°å„ÅÆ„ÅøË°®Á§∫
        console.log('   Page Snapshot (first 10 lines):');
        lines.forEach(line => console.log(`   ${line}`));
        console.log('   ...');
      }
    }
    console.log();

    // „Çπ„ÉÜ„ÉÉ„Éó 5: „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„ÉàÂèñÂæó
    console.log('üì∑ Step 5: Taking screenshot...');
    const screenshotResult = await client.screenshot('test-google.png');
    console.log('‚úÖ Screenshot result:', screenshotResult.success ? 'Success' : 'Failed');
    if (screenshotResult.content) {
      console.log('   Screenshot info:', screenshotResult.content.split('\n')[0]);
    }
    console.log();

    // „Çπ„ÉÜ„ÉÉ„Éó 6: Âà•„ÅÆ„Éö„Éº„Ç∏„Å∏„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥
    console.log('üåê Step 6: Navigating to GitHub...');
    const navResult2 = await client.navigate('https://github.com');
    console.log('‚úÖ Navigation result:', navResult2.success ? 'Success' : 'Failed');
    if (navResult2.sections) {
      const pageUrl = navResult2.sections.get('Page URL');
      const pageTitle = navResult2.sections.get('Page Title');
      console.log(`   Page URL: ${pageUrl}`);
      console.log(`   Page Title: ${pageTitle}`);
    }
    console.log();

    // „Çπ„ÉÜ„ÉÉ„Éó 7: 2ÂõûÁõÆ„ÅÆ„Çπ„Éä„ÉÉ„Éó„Ç∑„Éß„ÉÉ„Éà
    console.log('üì∏ Step 7: Taking another snapshot...');
    const snapshotResult2 = await client.snapshot();
    console.log('‚úÖ Snapshot result:', snapshotResult2.success ? 'Success' : 'Failed');
    console.log();

    // „Çπ„ÉÜ„ÉÉ„Éó 8: „Éñ„É©„Ç¶„Ç∂„ÇØ„É≠„Éº„Ç∫
    console.log('üîí Step 8: Closing browser...');
    const closeResult = await client.closeBrowser();
    console.log('‚úÖ Browser closed:', closeResult.success ? 'Success' : 'Failed');
    console.log();

    console.log('üéâ All steps completed successfully!');
    console.log('‚úÖ StdioÈÄö‰ø°„ÅßË§áÊï∞„É™„ÇØ„Ç®„Çπ„Éà„ÅÆÈÄ£Á∂öÂÆüË°å„Å´ÊàêÂäüÔºÅ');
    console.log('‚úÖ „Éñ„É©„Ç¶„Ç∂„Ç§„É≥„Çπ„Çø„É≥„Çπ„Åå‰øùÊåÅ„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™çÔºÅ');

  } catch (error) {
    console.error('‚ùå Error:', error.message);
    console.error('Stack:', error.stack);
    process.exit(1);
  } finally {
    // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    console.log('\nüßπ Disconnecting...');
    await client.disconnect();
    console.log('‚úÖ Disconnected');
  }
}

// ÂÆüË°å
main().then(() => {
  console.log('\n=== StdioÈÄö‰ø°„ÉÜ„Çπ„ÉàÂÆå‰∫Ü ===');
  process.exit(0);
}).catch(error => {
  console.error('\n‚ùå Fatal error:', error);
  process.exit(1);
});
