# Othello - Playwright E2Eテスト自動化ツール 要件定義書

**システム名**: Othello  
**バージョン**: 1.0  
**作成日**: 2025年10月13日  
**対象フェーズ**: フェーズ2（半自動版）

---

## 1. プロジェクト概要

### 1.1 システム名の由来
「Othello（オセロ）」という名前は、以下の意味を込めています：

**Playwrightとの繋がり**：
- Playwright（劇作家）といえばシェイクスピア
- シェイクスピアの四大悲劇の一つが「オセロ（Othello）」
- テスト自動化ツール「Playwright」を使う本システムにふさわしい名前

**テスト自動化への意味づけ**：
- **黒と白の反転**: テストの成功/失敗、実行済み/未実行の状態を表現（オセロゲームの石の反転のように）
- **戦略的な思考**: テストカバレッジを戦略的に向上させる（オセロゲームの戦略性）
- **盤面の可視化**: テストの実行状況を盤面のように可視化

### 1.2 目的
社内システムに対するE2Eテストの効率化とテストカバレッジの向上を目指し、**Playwrightエージェントをオーケストレーションする**半自動テストシステム「Othello」を開発する。

**Othelloの役割**：
- Playwrightエージェントに対してテスト指示を出す
- テスト実行結果を収集・分析する
- 未実行箇所を特定し、次のテストを生成する
- テスト実行のループを管理する

**テスト実行主体**：
- 実際のテスト実行はVS CodeのPlaywrightエージェントが担当
- Othelloはテスト実行エンジンを持たない

### 1.3 背景
- 手動でのE2Eテスト実行には時間がかかる
- テストカバレッジの把握が困難
- 未実行のテストシナリオの洗い出しが属人化している

### 1.4 スコープ
**対象**: 社内システム（Webアプリケーション）  
**実行環境**: ローカルPC（Windows/Mac/Linux）  
**フェーズ**: フェーズ2（半自動版）

---

## 2. 機能要件

### 2.1 コマンドライン起動機能
**優先度**: 高

#### 2.1.1 基本コマンド
```bash
othello --url <対象URL>
```

**動作**：
1. Playwrightエージェントに対象URLを渡す
2. エージェントがテストを自動生成・実行
3. 結果をOthelloが収集
4. 未実行箇所を分析して次のテストを指示
5. ループ継続

#### 2.1.2 オプション
| オプション | 説明 | 必須 | デフォルト値 |
|-----------|------|------|------------|
| `--url` | テスト対象のURL | ○ | - |
| `--max-iterations` | 最大ループ回数 | × | 10 |
| `--browser` | 使用ブラウザ（chromium/firefox/webkit） | × | chromium |
| `--output` | レポート出力先ディレクトリ | × | ./reports |
| `--config` | 設定ファイルのパス | × | ./config.json |
| `--auto-approve` | 全テスト自動承認 | × | false |

#### 2.1.3 実行例
```bash
# 基本実行（最大10回のループ）
othello --url https://internal-system.company.com

# ループ回数を指定
othello --url https://internal-system.company.com --max-iterations 5

# 自動承認モード（全テストを自動実行）
othello --url https://internal-system.company.com --auto-approve
```

---

### 2.2 Playwrightエージェントオーケストレーション機能
**優先度**: 高

#### 2.2.1 Othelloの役割
Othelloは**テスト実行エンジンを持たない**。以下の役割のみを担う：
- Playwrightエージェント（VS Code拡張）への指示
- テスト実行結果の収集
- 結果の分析と次のテスト生成
- 実行ループの管理

#### 2.2.2 Playwrightエージェントとの連携フロー
```
Othello (CLI)
    ↓ 1. テスト指示
VS Code Playwright Agent
    ├─ Planner: テストシナリオを考案
    ├─ Generator: テストコードを生成・実行
    └─ Healer: 失敗時の自動修復・再実行
    ↓ 2. 実行結果
Othello (CLI)
    ├─ 結果をCSVに記録
    ├─ 未実行箇所を分析
    └─ 次のテスト指示を生成
    ↓ 3. 次のテスト指示（ループ）
VS Code Playwright Agent
    ...
```

#### 2.2.3 使用するPlaywrightエージェント機能
- **Planner**: テストシナリオの自動生成
- **Generator**: テストコードの作成と実行
- **Healer**: テスト失敗時の自動修復とリトライ

#### 2.2.4 実行時の動作
1. Othelloコマンド起動
2. 対象URLをPlaywrightエージェントに渡す
3. **Planner**がページを分析し、実行すべきテストを提案
4. **Generator**がテストコードを生成して実行
5. **Healer**が失敗したテストを解析して再実行
6. 実行結果をOthelloが収集
7. CSV形式で結果を記録
8. 未実行箇所を分析
9. 次のテスト指示を生成（ステップ3に戻る）
10. 最大ループ回数に達するか、未実行箇所がなくなるまで継続

---

### 2.3 結果収集・記録機能
**優先度**: 高

#### 2.3.1 収集する情報
Playwrightエージェントの実行結果から以下を収集：
- 実行日時
- シナリオ名
- 対象URL
- ブラウザ種別
- 各ステップの実行内容
- 各ステップの実行結果（成功/失敗）
- エラーメッセージ（失敗時）
- 実行時間（各ステップおよび全体）
- スクリーンショット（各ステップ）

#### 2.3.2 ログ形式
- **構造化ログ**: JSON形式で保存
- **ファイル名**: `<実行回数>_<実行日時>.json`
- **保存場所**: `./logs/` ディレクトリ
- **データソース**: Playwrightエージェントの実行結果から生成

#### 2.3.3 ログ例
```json
{
  "execution_id": "iteration-1_20251013_143052",
  "iteration": 1,
  "target_url": "https://internal-system.company.com",
  "browser": "chromium",
  "start_time": "2025-10-13T14:30:52Z",
  "end_time": "2025-10-13T14:31:15Z",
  "duration_seconds": 23,
  "status": "success",
  "tests_generated_by_planner": [
    "ログイン機能のテスト",
    "ダッシュボード表示のテスト"
  ],
  "tests_executed": 2,
  "tests_passed": 2,
  "tests_failed": 0,
  "playwright_agent_results": {
    "planner_suggestions": ["..."],
    "generated_tests": ["..."],
    "healer_actions": []
  }
}
```

#### 2.3.4 CSV形式での実行結果出力
**目的**: テスト結果の一覧性を高め、エビデンスとして活用

**ファイル形式**:
- **ファイル名**: `test-results_<実行日時>.csv`
- **保存場所**: `./results/` ディレクトリ
- **文字コード**: UTF-8 with BOM（Excel対応）
- **データソース**: Playwrightエージェントの実行結果から抽出

**CSV形式**:
| 列名 | 説明 | 例 |
|------|------|-----|
| No | イテレーション番号-テスト番号 | 1-1, 1-2, 2-1 |
| テスト概要 | Playwrightエージェントが生成したテスト内容 | ログイン機能の正常系テスト |
| 実行結果 | 成功/失敗/エラー | 成功 |
| 入力値1 | 1つ目の入力項目（エージェントが使用した値） | 2025/10/25 |
| 入力値2 | 2つ目の入力項目 | 2名 |
| 入力値3 | 3つ目の入力項目 | 朝食あり |
| ... | （以降、必要な数だけ列を追加） | |

**CSV出力例**:
```csv
No,テスト概要,実行結果,入力値1,入力値2,入力値3,入力値4,備考
1-1,ログイン機能の正常系テスト（Planner提案）,成功,testuser01,Pass1234,,,ダッシュボード表示を確認
1-2,ログイン機能の異常系テスト（Planner提案）,成功,testuser01,WrongPass,,,エラーメッセージ表示を確認
2-1,ダッシュボードのメニュー操作テスト（Planner提案）,成功,,,,, 全メニュー項目が正常に動作
2-2,宿泊予約フォームの入力テスト（Planner提案）,成功,2025/10/25,2名,朝食あり,スタンダード,金額計算が正しいことを確認
```

**出力仕様**:
- Playwrightエージェントが実行したテストを1行ずつ記録
- 入力値はエージェントが使用した実際の値を記録
- テスト概要はエージェント（Planner）が生成した説明を使用
- 実行結果は「成功」「失敗」「エラー」の3種類
- 備考欄にはHealerによる修復履歴も記載

---

### 2.4 未実行テスト検出機能
**優先度**: 高

#### 2.4.1 検出ロジック
Playwrightエージェントの実行結果ログを解析し、以下を検出：
- 未訪問のページ
- 未操作のUI要素（ボタン、リンク等）
- 未入力のフォーム項目
- 未検証のエラーケース

#### 2.4.2 検出方法
1. 実行済みのログを全て読み込み
2. Playwrightエージェントがアクセスしたページ、操作した要素を抽出
3. 対象URLのページ構造から未操作要素を特定
4. 未カバー箇所をリストアップ
5. 次のイテレーションでPlaywrightエージェントに渡すテスト指示を生成

#### 2.4.3 出力形式
```json
{
  "analysis_date": "2025-10-13T14:35:00Z",
  "total_scenarios_executed": 5,
  "coverage_summary": {
    "visited_pages": 12,
    "unvisited_pages": 3,
    "tested_elements": 45,
    "untested_elements": 18
  },
  "uncovered_areas": [
    {
      "type": "page",
      "name": "パスワード変更画面",
      "url": "/user/change-password"
    },
    {
      "type": "element",
      "page": "ダッシュボード",
      "element": "エクスポートボタン",
      "selector": "#export-btn"
    }
  ]
}
```

---

### 2.5 次イテレーションのテスト指示生成機能
**優先度**: 高

#### 2.5.1 生成内容
未実行箇所の分析結果から、**Playwrightエージェント（Planner）への指示**を生成：
- 次に実行すべきテストの方針
- 重点的にテストすべき領域
- 優先度（高/中/低）
- 具体的なテスト観点（オプション）

**注意**: 詳細なテストシナリオはPlaywrightエージェントが自動生成するため、Othelloは大まかな方針のみを指示

#### 2.5.2 生成ロジック
1. 未カバー箇所の分析結果を入力
2. Claude APIを使用して次のテスト方針を生成
3. Playwrightエージェントが理解できる形式で指示を作成
4. 優先度を自動判定（アクセス頻度、リスク等から）

#### 2.5.3 出力形式（Playwrightエージェントへの指示）
```json
{
  "iteration": 2,
  "test_instructions": [
    {
      "priority": "high",
      "target": "パスワード変更機能",
      "instruction": "パスワード変更画面の正常系・異常系のテストを実行してください",
      "focus_areas": [
        "入力バリデーション",
        "エラーメッセージの表示",
        "成功時の動作確認"
      ]
    },
    {
      "priority": "medium",
      "target": "エクスポート機能",
      "instruction": "ダッシュボードのエクスポートボタンの動作をテストしてください"
    }
  ]
}
```

#### 2.5.4 人間向けレポート保存（オプション）
Markdown形式でも保存可能：
```markdown
# イテレーション2のテスト指示

生成日時: 2025-10-13 14:40:00

## 優先度: 高
### パスワード変更機能
パスワード変更画面の正常系・異常系のテストを実行してください

重点テスト領域:
- 入力バリデーション
- エラーメッセージの表示
- 成功時の動作確認

## 優先度: 中
### エクスポート機能
ダッシュボードのエクスポートボタンの動作をテストしてください
```

#### 2.5.5 ファイル保存
- **ファイル名**: `test-instructions_iteration-<N>.json` / `.md`
- **保存場所**: `./test-instructions/` ディレクトリ

---

### 2.6 対話型イテレーション承認機能
**優先度**: 高

#### 2.6.1 承認フロー
1. 各イテレーション終了後、次のテスト指示を表示
2. ユーザーがイテレーションの継続可否を選択
3. 承認された場合のみ次のイテレーションを実行

#### 2.6.2 CLI対話例
```
イテレーション1が完了しました。

実行結果:
- テスト実行数: 5件
- 成功: 4件
- 失敗: 1件（Healerにより修復済み）
- カバレッジ: 35%

未実行領域が見つかりました:
[1] パスワード変更機能（優先度：高）
[2] エクスポート機能（優先度：中）
[3] フィルタリング機能（優先度：低）

次のイテレーションを実行しますか？ (y/n):
> y

イテレーション2を開始します...
Playwrightエージェントにテスト指示を送信しています...
```

#### 2.6.3 実行モード
- **対話モード**（デフォルト）: 各イテレーション後に承認を求める
- **自動モード**: 最大イテレーション数まで自動実行（`--auto-approve` オプション）

---

### 2.7 日本語テストレポート生成機能
**優先度**: 高

#### 2.7.1 レポート内容
- **サマリー**: 全イテレーションの実行件数、成功/失敗数、カバレッジ推移
- **詳細結果**: 各イテレーションでPlaywrightエージェントが実行したテスト内容
- **スクリーンショット**: Playwrightエージェントが取得した画面キャプチャ
- **Healerの活動**: 自動修復が行われたテストの詳細
- **カバレッジ推移**: イテレーションごとのカバレッジの変化
- **推奨アクション**: 次に実行すべきテスト領域（最終イテレーション後）

#### 2.7.2 レポート形式
HTML形式で生成し、ブラウザで閲覧可能：
- 見やすいレイアウト
- スクリーンショットの埋め込み
- 実行結果の色分け（成功=緑、失敗=赤）

#### 2.7.3 レポート例（抜粋）
```
# Othello E2Eテスト実行レポート

実行日時: 2025年10月13日 14:30:52

## サマリー
- 総イテレーション数: 3回
- 総テスト実行数: 15件
- 成功: 13件
- 失敗: 2件（Healerにより1件修復）
- 最終カバレッジ: 78%

## イテレーション別結果

### イテレーション1 ✓
実行時間: 3分45秒  
テスト数: 5件（Planner提案）

Playwrightエージェントが基本的な機能のテストを実行しました。
ログイン機能、ダッシュボード表示、基本的なナビゲーションをテストし、
全てが正常に動作することを確認しました。

カバレッジ: 35%

### イテレーション2 ✓
実行時間: 4分12秒  
テスト数: 6件（Planner提案）

未実行だったパスワード変更機能とエクスポート機能をテストしました。
パスワード変更の異常系テストで1件失敗しましたが、Healerが自動修復し、
再実行で成功しました。

カバレッジ: 62% (↑27%)

Healer活動:
- パスワード入力フィールドのセレクタを自動調整

### イテレーション3 ✓
実行時間: 2分30秒  
テスト数: 4件（Planner提案）

残りの細かい機能をテストしました。フィルタリング機能、検索機能、
ソート機能など、ユーザーが利用する補助的な機能を網羅的に確認しました。

カバレッジ: 78% (↑16%)

## 推奨アクション
まだ未テストの領域（カバレッジ22%）が残っています。
次回実行時は管理者機能とエラーハンドリングに重点を置くことを推奨します。
```

---

### 2.8 設定ファイル管理機能
**優先度**: 中

#### 2.8.1 設定ファイル形式
JSON形式で以下を管理：
```json
{
  "default_browser": "chromium",
  "timeout_seconds": 60,
  "max_iterations": 10,
  "screenshot_on_error": true,
  "target_systems": [
    {
      "name": "社内システムA",
      "url": "https://internal-system.company.com",
      "login_required": true,
      "credentials": {
        "username_env": "TEST_USER",
        "password_env": "TEST_PASS"
      }
    }
  ],
  "playwright_agent": {
    "vscode_workspace": "/path/to/workspace",
    "planner_settings": {
      "test_generation_strategy": "comprehensive",
      "focus_on_edge_cases": true
    },
    "healer_settings": {
      "max_retry_attempts": 3,
      "auto_fix_selectors": true
    }
  },
  "claude_api": {
    "model": "claude-sonnet-4-20250514",
    "max_tokens": 4096,
    "temperature": 0.7
  },
  "coverage_threshold": {
    "target_percentage": 80,
    "stop_if_no_improvement": true
  }
}
```

**注意**: シナリオ定義はPlaywrightエージェントが自動生成するため、設定ファイルには含めない

#### 2.8.2 機密情報の扱い
- パスワード等は環境変数で管理
- 設定ファイルには環境変数名のみ記載
- `.env` ファイルで実際の値を管理（Git管理対象外）

---

## 3. 非機能要件

### 3.1 パフォーマンス
- 1シナリオの実行時間: 平均30秒以内（目標）
- レポート生成時間: 5秒以内
- 並列実行: 初期版では非対応（将来対応検討）

### 3.2 信頼性
- テスト実行の成功率: 95%以上
- エラー時の適切なログ出力
- 実行途中でのクラッシュ防止

### 3.3 保守性
- コードの可読性を重視
- 設定ファイルでのカスタマイズ性
- ログの詳細度を調整可能

### 3.4 セキュリティ
- 認証情報は環境変数で管理
- ログに機密情報を出力しない
- スクリーンショットの個人情報マスキング（将来対応）

### 3.5 互換性
- Node.js 18以上
- Playwright 1.40以上
- OS: Windows 10/11, macOS 12以上, Ubuntu 20.04以上

---

## 4. システム構成

### 4.1 技術スタック
- **実行環境**: Node.js
- **ブラウザ自動化**: Playwright
- **CLI**: Commander.js または Yargs
- **ログ管理**: Winston
- **レポート生成**: HTMLテンプレートエンジン（Handlebars等）
- **AI連携**: Anthropic Claude API

### 4.2 ディレクトリ構成
```
othello/
├── bin/
│   └── othello.js                # CLIエントリーポイント
├── src/
│   ├── orchestrator.js           # Playwrightエージェントオーケストレーター
│   ├── result-collector.js       # 結果収集
│   ├── analyzer.js               # 未実行テスト検出
│   ├── instruction-generator.js  # テスト指示生成
│   ├── reporter.js               # レポート生成
│   └── config.js                 # 設定管理
├── config/
│   └── default.json              # デフォルト設定
├── logs/                         # 実行ログ保存先（JSON形式）
├── results/                      # テスト結果保存先（CSV形式）
├── test-instructions/            # Playwrightエージェントへの指示保存先
├── reports/                      # レポート保存先（HTML形式）
├── screenshots/                  # スクリーンショット保存先（エージェントから取得）
├── package.json
└── README.md
```

---

## 5. ユースケース

### 5.1 初回実行（イテレーション1）
1. ユーザーが `othello --url <URL>` を実行
2. Playwrightエージェントに対象URLを渡す
3. Playwrightエージェント（Planner）がテストを生成
4. Playwrightエージェント（Generator）がテストを実行
5. 失敗したテストはPlaywrightエージェント（Healer）が修復・再実行
6. Othelloが実行結果を収集
7. JSON形式とCSV形式で結果を保存
8. 未実行箇所を分析
9. カバレッジを計算（例: 35%）
10. ユーザーに結果を表示

### 5.2 カバレッジ向上サイクル（イテレーション2以降）
1. 未実行箇所の分析結果を表示
2. ユーザーが次のイテレーション実行を承認
3. Othelloが未実行箇所をPlaywrightエージェント（Planner）に指示
4. Playwrightエージェントが新しいテストを生成・実行
5. Othelloが結果を収集してログに追加
6. カバレッジを再計算（例: 35% → 62%）
7. 最大イテレーション数または目標カバレッジに達するまで繰り返し

### 5.3 最終レポート生成
1. 全イテレーション完了後、統合レポートを生成
2. イテレーション別の結果とカバレッジ推移を表示
3. Healerの活動履歴を含める
4. 次回の推奨テスト領域を提示

---

## 6. 制約事項

### 6.1 技術的制約
- VS CodeのPlaywrightエージェント拡張が必要
- Claude APIの利用には課金アカウントが必要
- Playwrightエージェントの動作精度はページ構造に依存
- 動的コンテンツの多いSPAでは動作が不安定な場合がある

### 6.2 運用上の制約
- VS Codeが起動している必要がある
- 社内システムへのアクセスにはVPN接続が必要な場合がある
- Playwrightエージェント実行中はブラウザを占有する
- 初回実行時は認証情報の設定が必要

---

## 7. 開発スケジュール（目安）

### マイルストーン1（2週間）
- CLIコマンド基本実装
- Playwrightによる単一シナリオ実行
- 基本的なログ生成

### マイルストーン2（3週間）
- 未実行テスト検出機能
- テスト計画書生成機能
- 対話型承認機能

### マイルストーン3（2週間）
- 日本語レポート生成
- 設定ファイル管理
- エラーハンドリング強化

### マイルストーン4（1週間）
- テスト・デバッグ
- ドキュメント整備
- リリース準備

**合計**: 約8週間（2ヶ月）

---

## 8. 成功指標

### 8.1 定量指標
- テストカバレッジ: 現状比50%向上
- テスト実行時間: 手動実行比70%削減
- バグ検出率: 20%向上

### 8.2 定性指標
- QA担当者の作業負荷軽減
- テスト漏れの減少
- レポートの可読性向上

---

## 9. リスクと対策

### 9.1 技術的リスク
| リスク | 影響度 | 対策 |
|--------|--------|------|
| Playwright動作不安定 | 高 | リトライ機能実装、タイムアウト調整 |
| Claude API制限 | 中 | レート制限対応、キャッシュ活用 |
| ページ構造変更 | 中 | 柔軟なセレクタ指定、定期メンテナンス |

### 9.2 運用リスク
| リスク | 影響度 | 対策 |
|--------|--------|------|
| テストデータ不足 | 中 | テストデータ準備手順書作成 |
| 環境差異 | 低 | Docker化検討（将来） |
| ユーザー習熟 | 中 | 詳細なドキュメント、トレーニング実施 |

---

## 10. 将来的な拡張（フェーズ3以降）

### 10.1 自動化の強化
- 完全自律型テスト実行
- AIによる異常検知
- 自己修復機能（失敗時の自動リトライ戦略変更）

### 10.2 統合・連携
- CI/CDパイプラインとの統合
- Slackへの通知機能
- JIRAとの連携（バグチケット自動起票）

### 10.3 高度な分析
- カバレッジヒートマップ
- パフォーマンス測定
- 回帰テスト自動検出

---

## 11. 付録

### 11.1 用語集
- **シナリオ**: 一連のユーザー操作フロー
- **カバレッジ**: テスト対象のうち実行済みの割合
- **ヘッドレスモード**: ブラウザUIを表示せずに実行するモード
- **Playwrightエージェント**: Claudeのブラウザ自動化機能

### 11.2 参考資料
- Playwright公式ドキュメント: https://playwright.dev/
- Claude API ドキュメント: https://docs.anthropic.com/
- Node.js公式サイト: https://nodejs.org/

---

## 改訂履歴
| バージョン | 日付 | 変更内容 | 作成者 |
|-----------|------|---------|--------|
| 1.0 | 2025-10-13 | 初版作成 | Claude |

---

以上