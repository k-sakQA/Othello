# Othello - Playwright E2Eテスト自動化ツール 要件定義書（Phase 9版）

**システム名**: Othello  
**バージョン**: 2.0  
**作成日**: 2025年10月23日  
**対象フェーズ**: Phase 9（完全自動化版）

---

## 1. プロジェクト概要

### 1.1 システム名の由来
「Othello（オセロ）」という名前は、以下の意味を込めています：

**Playwrightとの繋がり**：
- Playwright（劇作家）といえばシェイクスピア
- シェイクスピアの四大悲劇の一つが「オセロ（Othello）」
- テスト自動化ツール「Playwright」を使う本システムにふさわしい名前

**テスト自動化への意味づけ**：
- **黒と白の反転**: テストの成功/失敗、実行済み/未実行の状態を表現
- **戦略的な思考**: テストカバレッジを戦略的に向上させる
- **盤面の可視化**: テストの実行状況を盤面のように可視化

### 1.2 目的
社内システムに対するE2Eテストの効率化とテストカバレッジの向上を目指し、**テスト観点リストに基づく体系的なテスト自動生成・実行システム**「Othello」を開発する。

**Othelloの役割**：
1. **テスト分析**: テスト観点リスト（23項目）に基づき、対象システムを体系的に分析
2. **テスト計画生成**: LLM（Claude/OpenAI）を活用してテストケースを自動生成
3. **テスト実行**: Playwright MCP経由でブラウザを制御し、テストを実行
4. **結果分析**: 実行結果を分析し、カバレッジを算出
5. **自己修復**: 失敗したテストを分析し、バグかテスト記述ミスかを判断して修正
6. **イテレーション**: カバレッジ目標達成まで自動でループ

**Phase 9の特徴**：
- ✅ Playwright Agentsとは独立した実装
- ✅ プログラマティックに完全自動化
- ✅ テスト観点リストに基づく体系的アプローチ
- ✅ LLM活用による高度な分析・生成

### 1.3 背景
- 手動でのE2Eテスト実行には時間がかかる
- テストカバレッジの把握が困難
- 未実行のテストシナリオの洗い出しが属人化している
- **体系的なテスト観点に基づくテストが不足**
- **失敗したテストの原因分析に時間がかかる**

### 1.4 スコープ
**対象**: Webアプリケーション全般  
**実行環境**: ローカルPC（Windows/Mac/Linux）  
**フェーズ**: Phase 9（完全自動化版）

---

## 2. 機能要件

### 2.1 コマンドライン起動機能
**優先度**: 高

#### 2.1.1 基本コマンド
```bash
npx othello --url <対象URL>
```

**動作**：
1. Othello-Plannerが対象サイトを探索し、テスト観点リストに基づいてテスト分析
2. Othello-Generatorがテストケースから実行可能なスクリプトを生成
3. Playwright MCPを介してテストを実行
4. Analyzerが結果を分析してカバレッジを算出
5. Othello-Healerが失敗テストを修復
6. カバレッジ目標達成までループ継続

#### 2.1.2 オプション
| オプション | 説明 | 必須 | デフォルト値 |
|-----------|------|------|------------|
| `--url` | テスト対象のURL | ○ | - |
| `--max-iterations` | 最大ループ回数 | × | 10 |
| `--coverage-target` | 目標カバレッジ（%） | × | 80 |
| `--browser` | 使用ブラウザ（chromium/firefox/webkit） | × | chromium |
| `--output` | レポート出力先ディレクトリ | × | ./reports |
| `--config` | 設定ファイルのパス | × | ./config/default.json |
| `--test-aspects-csv` | テスト観点リストCSVのパス | × | ./config/test-ViewpointList.csv |
| `--auto-heal` | 失敗テスト自動修復モード | × | true |
| `--llm-provider` | LLMプロバイダ（claude/openai/mock） | × | claude |

#### 2.1.3 実行例
```bash
# 基本実行（カバレッジ80%達成まで自動ループ）
npx othello --url https://hotel-example-site.takeyaqa.dev/ja/plans.html

# カバレッジ目標90%で実行
npx othello --url https://example.com --coverage-target 90

# カスタムテスト観点リストを使用
npx othello --url https://example.com \
            --test-aspects-csv ./custom-ViewpointList.csv

# 完全自動モード（自動修復ON）
npx othello --url https://example.com --auto-heal --max-iterations 20
```

---

### 2.2 テスト観点リスト活用機能（Phase 9の核心機能）
**優先度**: 最高

#### 2.2.1 テスト観点リストの構造
テスト観点リストは以下の23項目で構成されます：

| No | 品質特性 | テストタイプ中分類 | テストタイプ小分類 | テスト観点 |
|----|---------|-------------------|-------------------|-----------|
| 1  | - | 表示（UI） | レイアウト/文言 | アイテムの配置/表示サイズは？ |
| 2  | - | 表示（UI） | エラー表示（正常系） | エラーメッセージはある？ |
| 3  | - | 入力 | 文字種 | 入力した文字種による仕様外の動作 |
| 4  | - | 入力 | 文字数（正常値） | 仕様通りの文字数が入力可能 |
| 5  | - | 入力 | 文字数（正常限界） | 上限/下限文字数が入力可能 |
| 6  | - | 入力 | 文字数（異常値） | 入力できない文字数でエラー |
| 7  | - | 入力 | 数値（正常値） | 仕様通りの数値が入力可能 |
| 8  | - | 入力 | 数値（異常値） | 入力できない数値でエラー |
| 9  | - | 入力 | 未入力 | 空白のまま実行した場合の動作 |
| 10 | - | 動作確認 | 単機能 | 各機能が仕様通りに動作 |
| 11 | - | 状態遷移 | - | イベント発生により状態が変わる |
| 12 | - | 状態遷移 | 経時変化 | イベント発生中や発生後の状態 |
| 13 | - | 画面遷移 | - | 画面切り替えとデータ保持 |
| 14 | - | 変更・反映設定保持 | 初期値 | 起動時の設定・表示 |
| 15 | - | 変更・反映設定保持 | 変更・反映 | 変更がどの機能に反映されるか |
| 16 | - | 変更・反映設定保持 | 設定保持 | 変更が終了後も保持される |
| 17 | - | 変更・反映設定保持 | キャンセル | キャンセル時の設定 |
| 18 | - | 機能組合せ | - | 複数因子の組み合わせ動作 |
| 19 | - | 同時実行 | 登録と参照 | DB登録と参照の同時実行 |
| 20 | - | 同時実行 | 複数アカウント | 別環境・同一アカウントからの操作 |
| 21 | - | 割込み | 複数アカウント別デバイス | 別デバイスからの操作 |
| 22 | - | 割込み | 登録と参照 | DB登録中の参照リクエスト |
| 23 | - | 排他処理 | 禁則 | 禁則条件に合致した操作 |

#### 2.2.2 各観点の分析項目
各テスト観点について、以下を自動生成します：

1. **対象の機能構造**: どの機能・画面・要素を対象とするか
2. **考慮すべき仕様の具体例**: テスト対象システム固有の具体的な仕様
3. **狙うバグ（欠陥仮定）**: この観点で見つけるべきバグの種類

**出力形式**: JSON
```json
{
  "aspect_no": 1,
  "test_type": "表示（UI）",
  "test_category": "レイアウト/文言",
  "target_function": "ホテルプラン一覧ページ",
  "specifications": [
    "プランカードが画面幅に応じて適切にレイアウト",
    "必須項目に「必須」バッジが表示",
    "価格表示が正しいフォーマット（¥12,000）"
  ],
  "target_bugs": [
    "レスポンシブ崩れ",
    "文字切れ",
    "DPI違いで表示崩れ"
  ],
  "priority": "P0"
}
```

---

### 2.3 Othello-Planner（テスト分析・計画生成）
**優先度**: 最高

#### 2.3.1 責務
1. **サイト探索**: Playwright MCPのSnapshotを使用してサイト構造を把握
2. **テスト分析**: 23項目のテスト観点リストに基づいてシステムを分析
3. **テスト計画生成**: 各観点ごとに具体的なテストケースを生成

#### 2.3.2 入力
- 対象URL
- テスト観点リストCSV（23項目）
- 既存カバレッジ情報（2回目以降のイテレーション）
- 要件（オプション）

#### 2.3.3 処理フロー
```
1. MCPのbrowser_navigateで対象URLにアクセス
2. MCPのbrowser_snapshotでページ構造を取得
3. Playwrightエージェントの"Planner"プロンプトをベースに、
   テスト観点リスト23項目を適用
4. LLM（Claude/OpenAI）に以下を依頼:
   - 各観点の「対象の機能構造」を特定
   - 各観点の「考慮すべき仕様の具体例」を生成
   - 各観点の「狙うバグ」を定義
5. テストケースを生成（JSON形式）
```

#### 2.3.4 LLMプロンプト構造
```
あなたはテスト分析の専門家です。

対象URL: {url}
ページSnapshot: {snapshot_content}

以下の23項目のテスト観点リストに基づいて、このシステムを分析してください：

【テスト観点リスト】
1. 表示（UI）- レイアウト/文言
   観点: アイテムの配置/表示サイズは？
   
   分析してください：
   - 対象の機能構造: どの画面・要素が該当するか
   - 考慮すべき仕様の具体例: このシステム固有の具体的な仕様
   - 狙うバグ: どのようなバグを見つけるべきか
   
2. 表示（UI）- エラー表示（正常系）
   ...（23項目すべて）

出力形式: JSON配列
[
  {
    "aspect_no": 1,
    "test_type": "表示（UI）",
    "target_function": "...",
    "specifications": [...],
    "target_bugs": [...],
    "test_cases": [
      {
        "case_id": "TC001",
        "title": "...",
        "steps": [...],
        "expected_results": [...]
      }
    ]
  },
  ...
]
```

#### 2.3.5 出力
- **テスト分析結果**: JSON形式（23観点 × 各システム固有の分析）
- **テスト計画書**: Markdown形式（人間が読める形式）
- **テストケース**: JSON配列（Generatorへの入力）

---

### 2.4 Othello-Generator（テストスクリプト生成）
**優先度**: 最高

#### 2.4.1 責務
1. **テストケース解釈**: Plannerが生成したテストケースを解釈
2. **DOM構造分析**: Snapshotから実際のDOM要素を特定
3. **スクリプト生成**: MCP互換の実行可能なスクリプト（JSON）を生成

#### 2.4.2 入力
- Plannerが生成したテストケース（JSON）
- 最新のSnapshot（DOM構造）
- 既存カバレッジ情報

#### 2.4.3 処理フロー
```
1. テストケースを1件ずつ処理
2. Snapshotから該当する要素を特定
   - MCPの`ref`を優先使用
   - data-testid属性
   - アクセシブルな名前（role + name）
   - セマンティックセレクタ
3. LLM（Claude/OpenAI）に以下を依頼:
   - テストステップをMCP命令に変換
   - 適切な待機戦略を追加
   - エラーハンドリングを追加
4. MCP互換のJSON配列を生成
```

#### 2.4.4 セレクタ戦略（優先順位）
1. **MCPのref**（最も信頼性が高い）
2. **data-testid属性**
3. **アクセシブルな名前**（role + name）
4. **セマンティックセレクタ**（button:has-text("Submit")）
5. **CSSセレクタ**（最後の手段）

#### 2.4.5 出力形式
```json
[
  {
    "test_case_id": "TC001",
    "aspect_no": 1,
    "instructions": [
      {
        "type": "navigate",
        "url": "https://example.com",
        "description": "Navigate to hotel plans page"
      },
      {
        "type": "fill",
        "ref": "e48",
        "selector": "input[name='username']",
        "value": "山田太郎",
        "description": "Fill username field"
      },
      {
        "type": "click",
        "ref": "e59",
        "selector": "button[type='submit']",
        "description": "Click submit button"
      }
    ]
  },
  ...
]
```

---

### 2.5 Playwright MCP統合（テスト実行）
**優先度**: 高（Phase 8で実装済み）

#### 2.5.1 責務
- Generatorが生成したスクリプトをPlaywright MCPに送信
- ブラウザ操作の実行
- 結果とスナップショットの取得
- エラーリカバリー（Phase 8実装済み）

#### 2.5.2 機能（Phase 8実装済み）
- ✅ MCP Stdio通信
- ✅ 自動再試行（指数バックオフ）
- ✅ セッション再接続
- ✅ 失敗時スナップショット保存
- ✅ 実行履歴の永続化

---

### 2.6 LLM AI（結果分析）
**優先度**: 高

#### 2.6.1 責務
1. **結果の解釈**: テスト実行結果を分析
2. **バグの特定**: 失敗が実際のバグかを判断
3. **カバレッジ算出**: どの観点がカバーされたかを判定

#### 2.6.2 入力
- テスト実行結果（成功/失敗）
- スナップショット（失敗時）
- エラーメッセージ
- テストケース情報

#### 2.6.3 LLMプロンプト構造
```
あなたはテスト結果分析の専門家です。

テストケース: {test_case}
実行結果: {result}
エラーメッセージ: {error_message}
スナップショット: {snapshot}

以下を分析してください：

1. このテストは成功すべきでしたか？失敗すべきでしたか？
2. 失敗の原因は何ですか？
   a) 実際のバグ（システムの不具合）
   b) テストスクリプトの問題（セレクタミスなど）
   c) 環境の問題（タイムアウトなど）
3. バグの場合、どのような種類のバグですか？
4. テスト観点リストのどの項目がカバーされましたか？

出力形式: JSON
{
  "is_bug": true/false,
  "bug_type": "...",
  "failure_reason": "...",
  "covered_aspects": [1, 2, 3],
  "recommendation": "..."
}
```

#### 2.6.4 出力
- バグか否かの判定
- バグの種類
- カバーされた観点のリスト
- 推奨アクション

---

### 2.7 Othello-Healer（自己修復）
**優先度**: 高

#### 2.7.1 責務
1. **失敗原因の分類**: LLM分析結果に基づいて原因を特定
2. **修復策の生成**: テストスクリプトの問題であれば修正案を生成
3. **自動修復**: 修正したスクリプトで再実行

#### 2.7.2 失敗パターンと対応
| パターン | 原因 | 対応策 |
|---------|------|--------|
| 要素が見つからない | セレクタミス、DOM変更 | 新しいSnapshotから代替refを探す |
| タイムアウト | 待機時間不足 | 待機戦略を変更、時間を延長 |
| 要素が隠れている | モーダル、スクロール位置 | スクロール、モーダルを閉じる |
| 値が無効 | テストデータ不適切 | LLMで妥当な値を生成 |
| 実際のバグ | システムの不具合 | バグレポート生成、テストはスキップ |

#### 2.7.3 処理フロー
```
1. LLM分析結果を受け取る
2. is_bug === true の場合:
   - バグレポートを生成
   - テストをスキップ
   - 次のテストに進む
3. is_bug === false の場合:
   - 失敗原因に応じた修復策を実行
   - 修復したスクリプトで再実行
   - 再実行結果を記録
```

#### 2.7.4 出力
- 修復されたテストスクリプト
- 修復履歴（JSON）
- バグレポート（実際のバグの場合）

---

### 2.8 カバレッジ管理（Analyzer）
**優先度**: 高

#### 2.8.1 責務
1. **観点カバレッジ算出**: 23観点のうち何個カバーされたか
2. **機能カバレッジ算出**: どの画面・機能がテストされたか
3. **未実行テストの明確化**: 次にテストすべき観点・機能を特定

#### 2.8.2 カバレッジの種類
| カバレッジ種別 | 計算方法 |
|--------------|---------|
| **観点カバレッジ** | テスト済み観点数 / 23 × 100 (%) |
| **機能カバレッジ** | テスト済み機能数 / 全機能数 × 100 (%) |
| **画面カバレッジ** | テスト済み画面数 / 全画面数 × 100 (%) |
| **要素カバレッジ** | 操作済み要素数 / 全対話要素数 × 100 (%) |

#### 2.8.3 出力形式
```json
{
  "iteration": 3,
  "aspect_coverage": {
    "total": 23,
    "tested": 18,
    "percentage": 78.3,
    "untested_aspects": [19, 20, 21, 22, 23]
  },
  "function_coverage": {
    "total": 15,
    "tested": 12,
    "percentage": 80.0,
    "untested_functions": ["決済処理", "会員登録", "パスワード変更"]
  },
  "next_targets": {
    "priority_aspects": [19, 20],
    "priority_functions": ["決済処理"],
    "recommendation": "同時実行テストを優先実施"
  }
}
```

---

### 2.9 イテレーションループ（Orchestrator）
**優先度**: 最高

#### 2.9.1 完全なフロー
```
┌─────────────────────────────────────────────────────────┐
│ Iteration N                                              │
├─────────────────────────────────────────────────────────┤
│                                                          │
│ 1. Othello-Planner                                      │
│    ├─ サイト探索（Snapshot取得）                          │
│    ├─ テスト観点リスト（23項目）適用                       │
│    ├─ LLMで各観点を分析                                  │
│    │  ├─ 対象の機能構造                                  │
│    │  ├─ 考慮すべき仕様の具体例                           │
│    │  └─ 狙うバグ                                        │
│    └─ テストケース生成（JSON）                            │
│                                                          │
│ 2. Othello-Generator                                    │
│    ├─ テストケースを解釈                                  │
│    ├─ Snapshotから要素を特定（ref優先）                   │
│    ├─ LLMでMCP命令に変換                                 │
│    └─ 実行可能スクリプト生成（JSON）                       │
│                                                          │
│ 3. Playwright MCP → Playwright本体                     │
│    ├─ MCPコマンド送信                                     │
│    ├─ ブラウザ操作実行                                    │
│    ├─ 結果とスナップショット保存                           │
│    └─ エラーリカバリー（自動再試行）                       │
│                                                          │
│ 4. LLM AI（結果分析）                                    │
│    ├─ テスト結果を分析                                    │
│    ├─ バグか否かを判定                                    │
│    ├─ カバーされた観点を特定                              │
│    └─ 推奨アクションを提案                                │
│                                                          │
│ 5. Othello-Healer（必要時）                             │
│    ├─ is_bug === false の場合のみ                       │
│    ├─ 失敗原因に応じた修復                                │
│    ├─ 修復したスクリプトで再実行                           │
│    └─ 修復履歴を記録                                      │
│                                                          │
│ 6. Analyzer（カバレッジ算出）                            │
│    ├─ 観点カバレッジ算出（23項目）                         │
│    ├─ 機能カバレッジ算出                                  │
│    ├─ 未実行テストの明確化                                │
│    └─ 次のイテレーション計画                              │
│                                                          │
│ 7. 終了条件判定                                          │
│    ├─ 観点カバレッジ >= 目標値？                          │
│    ├─ 最大イテレーション数に達した？                       │
│    └─ YES → 終了 / NO → Iteration N+1へ                 │
│                                                          │
└─────────────────────────────────────────────────────────┘
```

#### 2.9.2 終了条件
以下のいずれかを満たすとループ終了：
1. **観点カバレッジが目標値に達した**（デフォルト80%）
2. **最大イテレーション数に達した**（デフォルト10回）
3. **3回連続でカバレッジが向上しなかった**（停滞判定）

---

## 3. 非機能要件

### 3.1 性能要件
| 項目 | 目標値 |
|------|--------|
| 1イテレーションあたりの実行時間 | 5分以内 |
| LLM応答時間 | 30秒以内 |
| MCP通信遅延 | 1秒以内 |

### 3.2 拡張性
- テスト観点リストはCSVで外部管理可能
- LLMプロバイダは切り替え可能（Claude/OpenAI/ローカルLLM）
- カスタムHealerルールを追加可能

### 3.3 保守性
- すべてのコンポーネントは独立してテスト可能
- ログはJSON形式で構造化
- 実行履歴はファイルで永続化

---

## 4. システム構成

### 4.1 全体アーキテクチャ
```
┌──────────────────────────────────────────────────────┐
│ bin/othello.js (CLIエントリーポイント)                  │
└────────────────┬─────────────────────────────────────┘
                 │
                 ↓
┌──────────────────────────────────────────────────────┐
│ src/orchestrator.js (イテレーションループ管理)          │
└────┬────┬────┬────┬────┬────┬────┬────┬────┬────────┘
     │    │    │    │    │    │    │    │    │
     ↓    ↓    ↓    ↓    ↓    ↓    ↓    ↓    ↓
  ┌─────┐┌─────┐┌─────┐┌─────┐┌─────┐┌─────┐┌─────┐
  │Planner││Gen. ││Healer││Agent││Analyzer││Collect││Report│
  │     ││     ││     ││     ││     ││     ││     │
  │LLM  ││LLM  ││LLM  ││MCP  ││     ││     ││HTML │
  └─────┘└─────┘└─────┘└─────┘└─────┘└─────┘└─────┘
                          │
                          ↓
                  ┌──────────────┐
                  │Playwright MCP│
                  └──────┬───────┘
                         │
                         ↓
                  ┌──────────────┐
                  │Playwright本体│
                  └──────┬───────┘
                         │
                         ↓
                  ┌──────────────┐
                  │  Chromium    │
                  └──────────────┘
```

### 4.2 データフロー
```
1. テスト観点リスト（CSV）
   ↓
2. Othello-Planner（分析 + テストケース生成）
   ↓
3. Othello-Generator（スクリプト生成）
   ↓
4. Playwright MCP（実行）
   ↓
5. LLM AI（結果分析）
   ↓
6. Othello-Healer（修復）または次のイテレーション
   ↓
7. Analyzer（カバレッジ算出）
   ↓
8. Reporter（HTMLレポート生成）
```

---

## 5. 出力物

### 5.1 実行中の出力
- コンソールログ（進捗状況）
- `logs/execution-history-{session-id}.json`（実行履歴）
- `logs/snapshots/`（失敗時のスナップショット）

### 5.2 最終出力
- `reports/test-plan-iteration-{N}.md`（各イテレーションの計画書）
- `reports/test-analysis.json`（テスト分析結果）
- `reports/coverage-report.json`（カバレッジレポート）
- `reports/final-report.html`（HTMLレポート）
- `reports/bug-reports/`（発見されたバグレポート）

---

## 6. Phase 9実装スケジュール

| フェーズ | 内容 | 期間 |
|---------|------|------|
| **Phase 9-1** | Othello-Planner実装 | 2日 |
| **Phase 9-2** | Othello-Generator実装 | 2日 |
| **Phase 9-3** | LLM AI結果分析実装 | 1日 |
| **Phase 9-4** | Othello-Healer実装 | 2日 |
| **Phase 9-5** | Orchestrator完成 | 1日 |
| **Phase 9-6** | E2Eテストとデバッグ | 2日 |

---

## 7. 参考資料

- テスト観点リスト（23項目）: `config/test-ViewpointList.csv`
- Playwright Agentsプロンプト: `.github/chatmodes/*.chatmode.md`
- Phase 8実装: `src/playwright-agent.js`（エラーリカバリー、MCP統合）
- サンプルテスト計画: `docs/hotel-site-test-plan.md`

---

**作成者**: Othello開発チーム  
**最終更新**: 2025年10月23日  
**バージョン**: 2.0（Phase 9版）
