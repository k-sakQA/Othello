/**
 * „É≠„Ç∞Ê©üËÉΩ„Éá„É¢
 * 
 * Êñ∞„Åó„ÅèËøΩÂä†„Åï„Çå„Åü„É≠„Ç∞Ê©üËÉΩ„ÅÆÂãï‰Ωú„ÇíÁ¢∫Ë™ç
 */

const Othello = require('./src/playwright-agent');
const fs = require('fs').promises;
const path = require('path');

async function main() {
  console.log('üìù Othello„É≠„Ç∞Ê©üËÉΩ„Éá„É¢\n');
  console.log('='.repeat(60));
  
  // „É≠„Ç∞„Éï„Ç°„Ç§„É´„Éë„Çπ
  const logFile = path.join(__dirname, 'logs', `othello-${Date.now()}.log`);
  
  console.log(`„É≠„Ç∞„Éï„Ç°„Ç§„É´: ${logFile}\n`);
  
  const mockConfig = {
    config: {
      default_browser: 'chromium',
      timeout_seconds: 300,
      playwright_agent: { mock_mode: false }
    }
  };

  // Othello„Ç§„É≥„Çπ„Çø„É≥„Çπ‰ΩúÊàêÔºà„É≠„Ç∞Ê©üËÉΩÊúâÂäπÔºâ
  const othello = new Othello(mockConfig, {
    mockMode: false,
    logFile: logFile,
    debugMode: true  // „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâÊúâÂäπ
  });

  try {
    console.log('1Ô∏è‚É£  „Çª„ÉÉ„Ç∑„Éß„É≥ÂàùÊúüÂåñÔºà„É≠„Ç∞Ë®òÈå≤ÈñãÂßãÔºâ');
    await othello.initializeSession();
    console.log('   ‚úÖ ÂàùÊúüÂåñÂÆå‰∫Ü\n');

    console.log('2Ô∏è‚É£  Google„Å´„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥');
    await othello.executeInstruction({
      type: 'navigate',
      url: 'https://www.google.com',
      description: 'Navigate to Google'
    });
    console.log('   ‚úÖ „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥ÂÆå‰∫Ü\n');

    console.log('3Ô∏è‚É£  „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„ÉàÂèñÂæó');
    await othello.mcpClient.callTool('browser_take_screenshot', {
      filename: 'logs/google-demo.png'
    });
    console.log('   ‚úÖ „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„ÉàÂÆå‰∫Ü\n');

    console.log('4Ô∏è‚É£  ÂÆüË°åÂ±•Ê≠¥„ÇíÂèñÂæó');
    const history = othello.getExecutionHistory();
    console.log(`   üìä ÂÆüË°åÂ±•Ê≠¥‰ª∂Êï∞: ${history.length}‰ª∂`);
    
    console.log('\n   üìã Â±•Ê≠¥„Çµ„Éû„É™„Éº:');
    history.forEach((entry, index) => {
      console.log(`      ${index + 1}. [${entry.level.toUpperCase()}] ${entry.action} (${entry.timestamp})`);
    });
    
    console.log('\n5Ô∏è‚É£  „Ç®„É©„Éº„É≠„Ç∞„ÅÆ„Åø„Éï„Ç£„É´„Çø„Éº');
    const errors = othello.getExecutionHistory({ level: 'error' });
    console.log(`   ‚ùå „Ç®„É©„Éº‰ª∂Êï∞: ${errors.length}‰ª∂\n`);

    console.log('6Ô∏è‚É£  „Çª„ÉÉ„Ç∑„Éß„É≥„ÇØ„É≠„Éº„Ç∫');
    await othello.closeSession();
    console.log('   ‚úÖ „ÇØ„É≠„Éº„Ç∫ÂÆå‰∫Ü\n');

    // „É≠„Ç∞„Éï„Ç°„Ç§„É´„ÇíÁ¢∫Ë™ç
    console.log('='.repeat(60));
    console.log('üìÑ „É≠„Ç∞„Éï„Ç°„Ç§„É´ÂÜÖÂÆπ:');
    console.log('='.repeat(60));
    
    const logContent = await fs.readFile(logFile, 'utf-8');
    const logLines = logContent.split('\n').filter(line => line.trim());
    
    console.log(`\n„É≠„Ç∞Ë°åÊï∞: ${logLines.length}Ë°å\n`);
    
    logLines.forEach((line, index) => {
      try {
        const entry = JSON.parse(line);
        console.log(`${index + 1}. [${entry.level.toUpperCase()}] ${entry.action}`);
        console.log(`   ÊôÇÂàª: ${entry.timestamp}`);
        console.log(`   „Çª„ÉÉ„Ç∑„Éß„É≥ID: ${entry.sessionId}`);
        if (entry.data) {
          console.log(`   „Éá„Éº„Çø: ${JSON.stringify(entry.data).substring(0, 80)}...`);
        }
        console.log();
      } catch (e) {
        console.log(`${index + 1}. („Éë„Éº„Çπ„Ç®„É©„Éº)`);
      }
    });

    console.log('='.repeat(60));
    console.log('‚úÖ „É≠„Ç∞Ê©üËÉΩ„ÉÜ„Çπ„ÉàÂÆå‰∫ÜÔºÅ');
    console.log(`üìÅ „É≠„Ç∞„Éï„Ç°„Ç§„É´: ${logFile}`);
    console.log('='.repeat(60));

  } catch (error) {
    console.error('\n‚ùå „Ç®„É©„ÉºÁô∫Áîü:', error.message);
    console.error('Stack:', error.stack);
    process.exit(1);
  }
}

main().then(() => {
  console.log('\n‚ú® „Éá„É¢ÁµÇ‰∫Ü');
  process.exit(0);
}).catch(error => {
  console.error('\n‚ùå Fatal error:', error);
  process.exit(1);
});
